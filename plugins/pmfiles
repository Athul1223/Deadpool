@Client.on_callback_query(filters.regex(r"^next"))
async def next_page(bot, query):
    chat_type = query.message.chat.type
    ident, req, key, offset = query.data.split("_")
    if int(req) not in [query.from_user.id, 0]:
        return await query.answer("oKda", show_alert=True)
    try:
        offset = int(offset)
    except:
        offset = 0
    search = BUTTONS.get(key)
    if not search:
        await query.answer("You are using one of my old messages, please send the request again.", show_alert=True)
        return

    files, n_offset, total = await get_search_results(search, offset=offset, filter=True)
    try:
        n_offset = int(n_offset)
    except:
        n_offset = 0

    if not files:
        return
    settings = await get_settings(query.message.chat.id)
    if settings['button']:
        btn = [
            [
                InlineKeyboardButton(
                    text=f'[{get_size(file.file_size)}] ðŸ“‚{file.file_name.replace("_", " ")}', callback_data=(f'mypmfile#{file.file_id}' if chat_type==enums.ChatType.PRIVATE else f'files#{file.file_id}') 
                ),
            ]
            for file in files
        ]
    else:
        btn = [
            [
                InlineKeyboardButton(
                    text=f"{file.file_name}", callback_data=(f'mypmfile#{file.file_id}' if chat_type==enums.ChatType.PRIVATE else f'files#{file.file_id}') 
                ),
                InlineKeyboardButton(
                    text=f"{get_size(file.file_size)}",
                    callback_data=(f'mypmfile#{file.file_id}' if chat_type==enums.ChatType.PRIVATE else f'files#{file.file_id}'), 
                ),
            ]
            for file in files
        ]

    if 0 < offset <= 10:
        off_set = 0
    elif offset == 0:
        off_set = None
    else:
        off_set = offset - 10
    if n_offset == 0:
        btn.append(
            [InlineKeyboardButton("Â« Ê™á´€á´„á´‹", callback_data=f"next_{req}_{key}_{off_set}"),
             InlineKeyboardButton(f"ðŸ“ƒ á´˜á´€É¢á´‡s {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}",
                                  callback_data="pages")]
        )
    elif off_set is None:
        btn.append(
            [InlineKeyboardButton(f"ðŸ“‘ {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}", callback_data="pages"),
             InlineKeyboardButton("É´á´‡xá´› Â»", callback_data=f"next_{req}_{key}_{n_offset}")])
    else:
        btn.append(
            [
                InlineKeyboardButton("Â« Ê™á´€á´„á´‹", callback_data=f"next_{req}_{key}_{off_set}"),
                InlineKeyboardButton(f"ðŸ“‘ {math.ceil(int(offset) / 10) + 1} / {math.ceil(total / 10)}", callback_data="pages"),
                InlineKeyboardButton("É´á´‡xá´› Â»", callback_data=f"next_{req}_{key}_{n_offset}")
            ],
        )
    try:
        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(btn)
        )
    except MessageNotModified:
        pass
    await query.answer()
